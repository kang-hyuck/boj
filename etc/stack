// 프로그래머스, 주식가격
// 해결방법1. O(N^2). 2중 for문(i,j)으로. prices 배열 계속 돌리면 된다. 
// 해결방법2. 스택 이용한다.  (참고: https://mungto.tistory.com/6)

// !!!!! prices.size()로... vector 잡아주어야... answer[index]로 "값 대입"할 때 segmant error 안뜬다...!!!!!


#include <string>
#include <vector>
#include <stack>

using namespace std;

stack<int> st;

vector<int> solution(vector<int> prices) {
    //  prices.size()로... vector 잡아주어야... answer[index]로 "값 대입"할 때 segmant error 안뜬다...
    vector<int> answer(prices.size());
    
    int i;
    
    //  i: prices의 index 증가용
    for(i=0; i<(int)prices.size(); i++)
    {
        //  stack(크거나 같은 값이 나올수록 stack에 누적함)에 있는 값이 i번째 prices보다 큰 경우.
        //  => prices 값이 감소(=작아졌음)을 의미한다.
        
        while( !st.empty() && prices[st.top()]>prices[i] )
        {
            // st.top()이 i보다 작을 수 밖에 없다. 앞에서 나온 index 이므로.
            // 스택에 1,3,3,3 처럼 같은 값들이 있을 수 있고. prices[i]값이 2 였다면.
            // i-st.top() 이 answer에 들어가야한다. st.top()이 인덱스 값이니까.
            answer[st.top()] = i - st.top();
            st.pop();
        }
        
        // prices[i]의 값이. 스택의 top에 있는 값과 같거나 클 경우. 스택에 쌓는다.
        st.push(i);
    }
    
    // 마지막 인덱스에 도착한 경우. 스택에서 꺼낼 비교 값이 더이상 없으므로. 쌓여만 있는 스택을 비어 주어야 한다.
    while( !st.empty() )
    {
        // 문제 답 보고 적절히 인덱스 맞춰서 계산 값 넣으면 된다.
        // (배열 최대 인덱스) - (자기 index 값) 이 답임
        answer[st.top()] = (int)prices.size() -1 -st.top();
        st.pop();
    }
    
    
    return answer;
}
